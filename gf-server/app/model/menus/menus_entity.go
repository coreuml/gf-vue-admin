// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package menus

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table menus.
type Entity struct {
    Id          uint        `orm:"id,primary"   json:"id"`           // 自增ID                  
    CreatedAt   *gtime.Time `orm:"created_at"   json:"created_at"`   // 创建时间                
    UpdatedAt   *gtime.Time `orm:"updated_at"   json:"updated_at"`   // 更新时间                
    DeletedAt   *gtime.Time `orm:"deleted_at"   json:"deleted_at"`   // 删除时间                
    MenuLevel   uint        `orm:"menu_level"   json:"menu_level"`   // 菜单等级(预留字段)      
    ParentId    uint        `orm:"parent_id"    json:"parent_id"`    // 父菜单ID                
    Path        string      `orm:"path"         json:"path"`         // 路由path                
    Name        string      `orm:"name"         json:"name"`         // 路由name                
    Hidden      int         `orm:"hidden"       json:"hidden"`       // 是否在列表隐藏          
    Component   string      `orm:"component"    json:"component"`    // 前端文件路径            
    Title       string      `orm:"title"        json:"title"`        // 菜单名                  
    Icon        string      `orm:"icon"         json:"icon"`         // 菜单图标                
    Sort        int         `orm:"sort"         json:"sort"`         // 排序标记                
    KeepAlive   int         `orm:"keep_alive"   json:"keep_alive"`   // 是否缓存                
    DefaultMenu int         `orm:"default_menu" json:"default_menu"` // 是否是基础路由(开发中)  
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}